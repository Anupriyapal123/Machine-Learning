# -*- coding: utf-8 -*-
"""MNIST_Dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ti_14DbUTUy9ygw7fUB5ZJhrbkltZMw5
"""

!pip install mnist
import tensorflow
import numpy as np
import mnist
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import Dense
from keras.utils import to_categorical

#Load dataset
train_images=mnist.train_images()
train_labels=mnist.train_labels()
test_images=mnist.test_images()
test_labels=mnist.test_labels()

#Normalising the dataset
train_images=train_images/255.0
test_images=test_images/255.0

#Flattening the images
train_images=train_images.reshape((-1,784))
test_images=test_images.reshape((-1,784))

#Printing the Shape
print(train_images.shape)
print(test_images.shape)

#Building the model
model=Sequential()
model.add(Dense(64,activation='relu', input_dim=784))
model.add(Dense(64,activation='relu'))
model.add(Dense(10,activation='softmax'))
#print(model)

#Compilation of model

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

#Train the model
details=model.fit(train_images, to_categorical(train_labels), epochs=10 , batch_size=256 , shuffle=True)

plt.plot(details.history['loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.show()

#Evaluate the model
eval=model.evaluate(test_images,to_categorical(test_labels))
print(eval)

#Prediction on the dataset

predictions=model.predict(test_images[0:5])
print(predictions)
print(np.argmax(predictions,axis=1))
print(test_labels[:5])

train_flipped=255-train_images
test_flipped=255- test_images

train_flipped=train_flipped/255
test_flipped=test_flipped/255

#New training and Testing Dataset with mixed images of black and white background
train_x=np.concatenate((train_images,train_flipped))
train_y=np.concatenate((train_labels,train_labels))
test_x=np.concatenate((test_images,test_flipped))
test_y=np.concatenate((test_labels,test_labels))

#Flattening the images
train_x=train_x.reshape((-1,784))
test_x=test_x.reshape((-1,784))
#train_flipped=train_flipped.reshape((-1,784))
#test_flipped=test_flipped.reshape((-1,784))

#Printing the Shape
print(train_x.shape)
print(test_x.shape)


#Building the model
model=Sequential()
model.add(Dense(64,activation='relu', input_dim=784))
model.add(Dense(64,activation='relu'))
model.add(Dense(10,activation='softmax'))

#Compilation of model

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

#Train the model
details=model.fit(train_x, to_categorical(train_y), epochs=20, shuffle=True , batch_size=2000)
plt.plot(details.history['loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.show()

#Prediction on the dataset

predictions=model.predict(test_x[0:5])
print(predictions)
print(np.argmax(predictions,axis=1))
print(test_y[:5])

#To see the image
for i in range(0,5):
  first_image=test_images[i]
  first_image=np.array(first_image, dtype='float')
  pixels=first_image.reshape((28,28))
  plt.imshow(pixels,cmap='gray')
  plt.show()